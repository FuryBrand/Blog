{
	"info": {
		"_postman_id": "fb2dd750-d7fe-470a-b347-a3c80d3df437",
		"name": "MyExplore",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1.参数化",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d92cdd52-4997-4099-99d6-3b9371af0cad",
						"exec": [
							"//创建一个临时变量",
							"var orderNo = Math.round(new Date().getTime());",
							"//打印日志，可以在View -> Show Postman Console中看到",
							"console.log('生成的订单号为：' + orderNo);",
							"//给参数赋值",
							"pm.environment.set('orderNo', orderNo);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "value",
							"value": "{\n    \"errcode\": 0,\n    \"errmsg\": \"ok\",\n    \"orderno\": \"{{orderNo}}\"\n}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://192.168.75.41/setReturn",
					"protocol": "http",
					"host": [
						"192",
						"168",
						"75",
						"41"
					],
					"path": [
						"setReturn"
					]
				}
			},
			"response": []
		},
		{
			"name": "2.如何应对一个有签名算法的接口",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a74202ea-20d9-4fde-87d3-9b74cf099a8f",
						"exec": [
							"/*-------------引入一些方法-开始----------*/\r",
							"//由于原生JavaScript不支持jQuery的each方法，这里偷懒找了个each方法的实现放到最前面了。\r",
							"// 通过字面量方式实现的函数each\r",
							"var each =  function(object, callback){\r",
							"  var type = (function(){\r",
							"          switch (object.constructor){\r",
							"            case Object:\r",
							"                return 'Object';\r",
							"            case Array:\r",
							"                return 'Array';\r",
							"            case NodeList:\r",
							"                return 'NodeList';\r",
							"            default:\r",
							"                return 'null';\r",
							"        }\r",
							"    })();\r",
							"    // 为数组或类数组时, 返回: index, value\r",
							"    if(type === 'Array' || type === 'NodeList'){\r",
							"        // 由于存在类数组NodeList, 所以不能直接调用every方法\r",
							"        [].every.call(object, function(v, i){\r",
							"            return callback.call(v, i, v) === false ? false : true;\r",
							"        });\r",
							"    }\r",
							"    // 为对象格式时,返回:key, value\r",
							"    else if(type === 'Object'){\r",
							"        for(var i in object){\r",
							"            if(callback.call(object[i], i, object[i]) === false){\r",
							"                break;\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"}\r",
							"/*-------------引入一些方法-结束----------*/\r",
							"/**\r",
							" * 接口要求将原有入参按照key进行升序排列后，拼接字符串。将字符串进行MD5计算后赋值给`authorityData`。再加上原有入参一起发送。\r",
							" * 原始报文示例：{\"vehicleCode\":\"C001_001\",\"deviceCode\":\"D001_001\",\"type\":1,\"uuid\":\"4561acdawf\"}\r",
							" * 签名后报文示例：{\"vehicleCode\":\"C001_001\",\"deviceCode\":\"D001_001\",\"type\":1,\"uuid\":\"4561acdawf\",\"authorityData\":\"7ef648848b403a668f543d13b60b1b71\"}\r",
							" */\r",
							"//原始报文\r",
							"var inputstr = '{\"vehicleCode\":\"C001_001\",\"deviceCode\":\"D001_001\",\"type\":1,\"uuid\":\"4561acdawf\"}';\r",
							"//将入参转换为json对象\r",
							"var inputjso = JSON.parse(inputstr);\r",
							"//对json对象的入参进行排序\r",
							"var inputKey = [];\r",
							"each(inputjso, function(key, val) { inputKey[inputKey.length] = key;  });\r",
							"inputKey.sort();\r",
							"//拼接MD5计算前的字符串\r",
							"var str_md5 = '';\r",
							"each(inputKey, function(i, key) {\r",
							"  str_md5 = str_md5 + key + \"=\" + inputjso[key] + \"&\";\r",
							"});\r",
							"console.log('计算前的字符串为：' + str_md5.slice(0,-1));\r",
							"//MD5计算\r",
							"var str_md5_sign = CryptoJS.MD5(str_md5.slice(0,-1)).toString().toLowerCase();\r",
							"//拼接签名后的报文\r",
							"inputjso.authorityData = str_md5_sign;\r",
							"console.log('签名后的报文为：' + JSON.stringify(inputjso));\r",
							"//替换请求主体中的临时变量\r",
							"pm.environment.set('message', JSON.stringify(inputjso));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{message}}"
				},
				"url": {
					"raw": "http://192.168.75.41/setReturn",
					"protocol": "http",
					"host": [
						"192",
						"168",
						"75",
						"41"
					],
					"path": [
						"setReturn"
					]
				}
			},
			"response": []
		},
		{
			"name": "3.网站需要登录咋整",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a74202ea-20d9-4fde-87d3-9b74cf099a8f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"value": "balabalabala",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "value",
							"value": "{\"vehicleCode\":\"C001_001\",\"deviceCode\":\"D001_001\",\"type\":1,\"uuid\":\"4561acdawf\",\"authorityData\":\"7ef648848b403a668f543d13b60b1b71\"}",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://192.168.75.41/setReturn",
					"protocol": "http",
					"host": [
						"192",
						"168",
						"75",
						"41"
					],
					"path": [
						"setReturn"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}